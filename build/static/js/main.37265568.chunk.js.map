{"version":3,"sources":["serviceWorker.js","Home.jsx","Alamat.jsx","Nama.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","Home","Component","Alamat","Nama","App","to","path","exact","jQuery","$","global","ReactDOM","render","basename","document","getElementById"],"mappings":"mGAAA,kCAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8GC,SAASC,IACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaL,kB,uFC5GJM,E,iLARX,OACE,6BACC,yC,GAfYC,aCqBJC,E,iLARX,OACE,6BACC,2C,GAfcD,aCqBNE,E,iLARX,OACE,6BACC,yC,GAfYF,a,gBCSbG,E,iLAEF,OACE,6BACE,4BACE,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,QAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAEN,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GAAE,kBAAC,EAAD,OACvB,kBAAC,IAAD,CAAOD,KAAK,SAAQ,kBAAC,EAAD,OACpB,kBAAC,IAAD,CAAOA,KAAK,WAAU,kBAAC,EAAD,a,GAbdL,aA2BHG,O,oECtCf,mIAWAd,OAAOkB,OAASC,IAChBnB,OAAOmB,EAAIA,IACXC,EAAOF,OAASC,IAGhBE,IAASC,OACR,kBAAC,IAAD,CAAYC,SAAS,KACpB,kBAAC,IAAD,OAECC,SAASC,eAAe,SAK3BnB,O","file":"static/js/main.37265568.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n\nclass Home extends Component {\n\n// super(props);\n\n\t// this.state = {\n\t\t// name:''\n\t// }\n\n\t// this.onSubmit = this.onSubmit.bind(this);\n\t// this.handleChange = this.handleChange.bind(this);\n// }\n\n  render() {\n    return (\n      <div>\n      \t<h1>Home</h1>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\n\nclass Alamat extends Component {\n\n// super(props);\n\n\t// this.state = {\n\t\t// name:''\n\t// }\n\n\t// this.onSubmit = this.onSubmit.bind(this);\n\t// this.handleChange = this.handleChange.bind(this);\n// }\n\n  render() {\n    return (\n      <div>\n      \t<h1>Alamat</h1>\n      </div>\n    );\n  }\n}\n\nexport default Alamat;","import React, { Component } from 'react';\n\nclass Nama extends Component {\n\n// super(props);\n\n\t// this.state = {\n\t\t// name:''\n\t// }\n\n\t// this.onSubmit = this.onSubmit.bind(this);\n\t// this.handleChange = this.handleChange.bind(this);\n// }\n\n  render() {\n    return (\n      <div>\n      \t<h1>Nama</h1>\n      </div>\n    );\n  }\n}\n\nexport default Nama;","import React, { Component } from 'react';\n// import Headnav from './component/template/navigasi/Headnav';\n// import Navbar from './component/template/navigasi/Navbar';\n// import VCart from './view/VCart';\n// import VLogin from './view/VLogin';\n// import VHome from './view/VHome.js';\nimport Home from './Home';\nimport Alamat from './Alamat';\nimport Nama from './Nama';\nimport { Switch, Route, Link } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <ul>\n          <li><Link to=\"/\">Home</Link></li>\n          <li><Link to=\"Nama\">Nama</Link></li>\n          <li><Link to=\"Alamat\">Alamat</Link></li>\n        </ul>\n        <hr/>\n        <Switch>\n          <Route path=\"/\" exact ><Home /></Route>\n          <Route path=\"/Nama\"><Nama /></Route>\n          <Route path=\"/Alamat\"><Alamat /></Route>\n        </Switch>\n        {/*<Headnav />*/}\n        {/*<Navbar />*/}\n        {/*<Switch>*/}\n          {/*<Route path=\"/\" exact ><VHome /></Route>*/}\n          {/*<Route path=\"/mycart\"><VCart /></Route>*/}\n          {/*<Route path=\"/login\"><VLogin/></Route>*/}\n        {/*// </Switch>*/}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { HashRouter } from \"react-router-dom\";\nimport $ from 'jquery';\nwindow.jQuery = $;\nwindow.$ = $;\nglobal.jQuery = $;\n\n\nReactDOM.render(\n\t<HashRouter basename=\"/\">\n\t\t<App />\n\t</HashRouter>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}